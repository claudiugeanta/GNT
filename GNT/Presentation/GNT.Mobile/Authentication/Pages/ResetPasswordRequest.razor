@attribute [Route(PageRoute)]

@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using GNT.Common.Client.Services
@using GNT.Shared.Errors
@using GNT.Shared.Dtos.UserManagement
@using GNT.Web.Client.Constants

@inject BlazorHttpClient httpClient;
@inject ILocalStorageService localStorage;
@inject NavigationManager navigationManager
@inject TranslateService t;

<MudStack Class="d-flex justify-center align-center" Spacing="5" Style="width: 320px">
    <MudText Typo="Typo.h4">@t[General.ResetPassword]</MudText>
    @if (!requestSentSuccessfully)
    {
        <MudForm @bind-IsValid="@success">

            <MudTextField T="string"
                          @bind-Value="Email"
                          Label="Email"
                          Required="true"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          RequiredError="@t[FailureCode.RequiredField]"
                          Validation="@(new EmailAddressAttribute() { ErrorMessage = t[FailureCode.InvalidEmailAddress]})" />

            <div class="d-flex align-center justify-space-between">
                <MudButton OnClick="SendResetPasswordRequest" Color="Color.Primary" Variant="Variant.Filled" Disabled="@(!success)" Class="mr-auto mt-2">@t[General.SendCode]</MudButton>
            </div>

            <MudButton Variant=Variant.Text OnClick="@(() => navigationManager.NavigateTo(Login.PageRoute))" Color="Color.Primary" Class="ml-auto">@t[General.BackToLogin]</MudButton>

        </MudForm>
    }
    else
    {
        <MudAlert Severity="Severity.Success" NoIcon=true ContentAlignment="HorizontalAlignment.Center">@t[General.ResetEmailInstructions]</MudAlert>
        <MudButton OnClick="@(() => navigationManager.NavigateTo(Login.PageRoute))">@t[General.BackToMainPage]</MudButton>
    }
</MudStack>
@code {
    public const string PageRoute = "/auth/reset-password-request";

    string Email { get; set; }

    bool success;
    bool requestSentSuccessfully;

    private async Task SendResetPasswordRequest()
    {
        requestSentSuccessfully = await httpClient.Post<string>($"{ApplicationEndpoints.Authentication}/reset-password-request", Email);
    }
}