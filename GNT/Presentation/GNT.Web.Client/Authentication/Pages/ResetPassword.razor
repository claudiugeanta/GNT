@attribute [Route(PageRoute)]

@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using Blazored.LocalStorage
@using GNT.Common.Client.Services
@using GNT.Shared.Errors
@using GNT.Shared.Dtos.UserManagement
@using GNT.Web.Client.Constants
@using Microsoft.AspNetCore.Components.Authorization

@inject BlazorHttpClient httpClient;
@inject ILocalStorageService localStorage;
@inject NavigationManager navigationManager;
@inject TranslateService t;

@if (!loading)
{
    <MudStack Class="d-flex justify-center align-center" Spacing="5" Style="width: 350px">
        @if (securityCodeValid)
        {
            <MudText Typo="Typo.h4">@t[General.SetNewPassword]</MudText>

            @if (!successfullyChanged)
            {
                <MudForm @bind-IsValid="@success">
                    <MudTextField T="string"
                                  @bind-Value="NewPassword"
                                  Label="@t[General.NewPassword]"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  InputType="InputType.Password"
                                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))"
                                  Required="true"
                                  RequiredError="@t[FailureCode.RequiredField]" />

                    <MudTextField T="string"
                                  @bind-Value="ConfirmPassword"
                                  Label="@t[General.ConfirmNewPassword]"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  InputType="InputType.Password"
                                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))"
                                  Required="true"
                                  RequiredError="@t[FailureCode.RequiredField]" />

                    <div class="d-flex align-center justify-space-between">
                        <MudButton Variant="Variant.Filled" OnClick="ChangePasswordRequest" Color="Color.Primary" Disabled="@(!success)" Class="mr-auto mt-2">@t[General.ChangePassword]</MudButton>
                    </div>
                </MudForm>
            }
            else
            {
                <MudAlert Severity="Severity.Success">Parola a fost modificata cu succes.</MudAlert>
                <MudText Typo="Typo.subtitle2" Align="Align.Center"></MudText>
                <MudButton OnClick="() => navigationManager.NavigateTo(Login.PageRoute)">Autentifica-te</MudButton>
            }

        }
        else
        {
            <MudAlert Severity="Severity.Error" NoIcon=true ContentAlignment="HorizontalAlignment.Center">Linkul pe care l-ai accesat nu mai este valid.</MudAlert>
            <MudButton Variant=Variant.Text OnClick="@(() => navigationManager.NavigateTo(Login.PageRoute))">Inapoi la pagina principala</MudButton>
        }
    </MudStack>
}

@code {

    public const string PageRoute = "/auth/reset-password";

    [SupplyParameterFromQuery]
    public string SecurityCode { get; set; }

    [SupplyParameterFromQuery]
    public string Email { get; set; }

    private string NewPassword { get; set; }
    private string ConfirmPassword { get; set; }

    bool success;
    bool successfullyChanged;
    bool securityCodeValid;
    bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        securityCodeValid = await httpClient.Get<bool>($"{ApplicationEndpoints.CheckSecurityCode}/{SecurityCode}");

        loading = false;
        StateHasChanged();
    }

    private async Task ChangePasswordRequest()
    {
        var postModel = new ResetPasswordDto(Email, SecurityCode, NewPassword);

        successfullyChanged = await httpClient.Post<ResetPasswordDto>($"{ApplicationEndpoints.Authentication}/reset-password", postModel);
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }
}